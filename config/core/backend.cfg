[delayed_gcode _KLIPPER_STARTUP_HANDLER]
initial_duration: 3  # delay to call spool dats after klipper startup
gcode: {action_call_remote_method("get_spoolman_datas")} # Ask moonraker to render template configured in spoolman_ext.conf  

[gcode_macro _LOAD_FILAMENT_SETTINGS]
gcode:
## load settings table or throw error if save variable not set
    {% set fs_table=printer.save_variables.variables['kbobine_table']|default({}) %}

## load variables
    {% set fs_vars = printer['gcode_macro _KBOBINE'] %}
    {% set ID = params['ID']|default(fs_vars.spoolman.id|default(0))|int|string %}

## Abort if ID already loaded
# params.ID is only used by spoolman_ext 
    {% if params['ID'] != fs_vars.spool_id|default(0) %} 
## load settings if in kbobine_table 
        {% if fs_table[ID] %}
            ## Store/update vendor, name and material for default loading
            {% set _= fs_table[ID].update({'vendor':   fs_vars.spoolman.vendor,
                                            'name':    fs_vars.spoolman.name,
                                            'material':fs_vars.spoolman.material }) %} 
            SAVE_VARIABLE VARIABLE=kbobine_table VALUE='{ fs_table|tojson }'
            RESPOND MSG="{ ("%s - %s %s loaded!" % (fs_table[ID].vendor, fs_table[ID].material, fs_table[ID].name))}"
        {% else %}
            {% if ID == '0' %}RESPOND TYPE=error MSG="No filament loaded !"{% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_KBOBINE VARIABLE=spool_id VALUE={ID}
        
        _CLEAR_CURRENT_SETTINGS 

        {% if fs_table[ID] or ID == '0' %}
            _GET_DEFAULT
            {% if fs_vars.autoremove_default %}CLEAN_DEFAULT QUIET=1 CONFIRM=yes{% endif %}
            _DEPLOY_CURRENT_SETTINGS
            {% if fs_vars.verbose %}GET_SPOOL{% endif %}
            _APPLY_ALL_SETTINGS 
        {% else %}
            _PROMPT_SELECT_SETTINGS_SOURCE ID={ID}
        {% endif %}
    {% elif params['ID'] %}
        _FS_VERBOSE MSG="spoolid {ID} already loaded"
    {% endif %}

## Future proof macros (1 default setting per filament type ABS, PETG, FLEX, PC, ....)   
[gcode_macro _GET_DEFAULT]
gcode:

[gcode_macro _DEPLOY_CURRENT_SETTINGS]
gcode:
## load variables
    {% set fs_vars = printer['gcode_macro _KBOBINE'] %}
    {% set ID = fs_vars.spool_id|default(0)|string %}
    {% set extruder = printer.configfile.config.extruder %}
    {% set nozzle_diameter = 4.0 if not extruder else (extruder.nozzle_diameter|float*10) %}
    {% set nozzle_diameter = ("%.1f" if nozzle_diameter % 1 != 0 else "%.0f") % nozzle_diameter %}
    {% set current_settings = fs_vars.default %}

    {% if ID != '0' %}
        ## load spool or throw error if save variable not set
        {% set spool=printer.save_variables.variables['kbobine_table'][ID] %}
        {% if spool.settings|length > 0 %}
            {% for el in [nozzle_diameter,'default']%} 
            {% if spool.settings[el] %}
                {% for k, v in spool.settings[el].items() if k in current_settings %}
                    {% if k in fs_vars.required %}{% set _= fs_vars.required.remove(k) %}{% endif %}
                    {% set _= current_settings.update({k:v}) %}
                {% endfor %}
            {% endif %}
            {% endfor %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_KBOBINE VARIABLE=current_settings VALUE='{ current_settings|tojson }'
        {% if fs_vars.required|length > 0 %}
            _PROMPT_CALIBRATE REASON="{fs_vars.required|join(', ')} missing. " TITLE="{'%s - %s' % (spool.vendor,spool.name) }"
        {% endif %}
    {% else %}
        _CLEAR_CURRENT_SETTINGS
    {% endif %} 

[gcode_macro _CLEAR_CURRENT_SETTINGS]
gcode:
    SET_GCODE_VARIABLE MACRO=_KBOBINE VARIABLE=current_settings VALUE='{'{}'}' 

[gcode_macro _INSERT_FILAMENT_SETTINGS]
description: Usage : _INSERT_FILAMENT_SETTINGS [SOURCE=ID]
gcode:
## load settings db  or throw error if save variable not nset
    {% set fs_table = printer.save_variables.variables['kbobine_table'] | default({}) %}

## load variables
    {% set fs_vars = printer['gcode_macro _KBOBINE'] %}
    {% set ID = fs_vars.spool_id|default(0)|int|string %}
    {% set SOURCE = params['SOURCE']|default(0)|int|string %}
    _PROMPT_CLOSE
    {% if not fs_table[ID] and ID != '0' %}
        {% if fs_table[SOURCE] %}
            {% set _= fs_table.update({ID:fs_table[SOURCE].copy()}) %}
            {% set _= fs_table[ID].pop('material') %}
            {% set _= fs_table[ID].pop('name') %}
            {% set _= fs_table[ID].pop('vendor') %}
        {% else %}
             {% set _= fs_table.update({ID:{'settings':{}}}) %}
        {% endif %}
        SAVE_VARIABLE VARIABLE=kbobine_table VALUE='{ fs_table|tojson }'
        M400
        _LOAD_FILAMENT_SETTINGS
        _PROMPT_CALIBRATE REASON="New Filament." 
    {% endif %}

[gcode_macro _DEL_FILAMENT_SETTINGS]
description: Usage : _DEL_FILAMENT_SETTINGS ID=<ID>
gcode:
## load settings db  or throw erro if save variable not nset
    {% set fs_table=printer.save_variables.variables['kbobine_table'] | default({}) %}

## load variables
    {% set ID = params['ID']|default(0)|int|string %}
    {% if fs_table[ID] and ID != '0' %}
        {% set _= fs_table.pop(ID) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=kbobine_table VALUE='{ fs_table|tojson }'
    M400

[gcode_macro _SET_SETTINGS]
gcode:
## load settings db  or throw error if save variable not nset
    {% set fs_table = printer.save_variables.variables['kbobine_table'] | default({}) %}

## load variables
    {% set _p=params %}
    {% set fs_vars = printer['gcode_macro _KBOBINE'] %}
    {% set ID = fs_vars.spool_id|int|string %}
    {% set current_settings = fs_vars.current_settings %}
    {% set default = fs_vars.default %}
    {% set th_depend = fs_vars.th_depend %}
    
# Useful variables
    {% set extruder = printer.configfile.config.extruder %}
    {% set nozzle_diameter = 4.0 if not extruder else (extruder.nozzle_diameter|float*10) %}
    {% set nozzle_diameter = ("%.1f" if nozzle_diameter % 1 != 0 else "%.0f") % nozzle_diameter %}
    
 ## 
    {% if _p.TABLE == 'current_settings' and current_settings and _p %}
        {% for param, value in _p.items() %}
            {% if param | lower in current_settings %}
                {% set _= current_settings.update({param|lower : 
                    value|int if (value|float == value|int and value|float != 0.0) or value == '0' else (
                    value|float if value|float != 0.0 else 
                    value|string
                    )}) %}
            {% endif %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_KBOBINE VARIABLE=current_settings VALUE='{ current_settings|tojson }'
        {% if fs_vars.verbose %}
            GET_LOADED_MATERIAL SETTINGS=[{% for param in params if param|lower in current_settings 
                %}{param|lower},{% endfor %}]
        {% endif %}
        
    {% elif _p.TABLE == 'fs_table' and fs_table[ID] and _p %}
        {% for param, value in _p.items() %}
            {% if param | lower in default %}
                {% set settings_key = nozzle_diameter if param|lower in th_depend else 'default' %}
                {% if not fs_table[ID].settings[settings_key] %}
                    {% set _= fs_table[ID].settings.update({settings_key : {} }) %}
                {% endif %}
                {% set _= fs_table[ID].settings[settings_key].update({param|lower : 
                    value|int if (value|float == value|int and value|float != 0.0) or value == '0' else (
                    value|float if value|float != 0.0 else 
                    value|string
                    )}) %}
            {% endif %}
        {% endfor %}
        SAVE_VARIABLE VARIABLE=kbobine_table VALUE='{ fs_table|tojson }'
        {% if fs_vars.autoremove_default %}CLEAN_DEFAULT QUIET=1 CONFIRM=yes{% endif %}
        _DEPLOY_CURRENT_SETTINGS
        {% if fs_vars.verbose %}GET_SPOOL{% endif %}
    {% elif _p %}
        {action_raise_error("No settings to apply, choose a spool or run LOAD_DEFAULT_SETTINGS")}
    {% endif %}
    
[gcode_macro _APPLY_SETTINGS]
gcode:
## load variables
    {% set fs_vars = printer['gcode_macro _KBOBINE'] %}
    {% set settings = params['PARAMS'].split(',') %}
    {% set values = fs_vars.current_settings %} 
    {% set pending_actions = {} %}

## Useful macro
    {% macro add_action(function, str, enabled=True) %}
        {% if enabled %}
            {%if not pending_actions[function] %}{% set _= pending_actions.update({function:[]}) %}{% endif %}
            {% set _= pending_actions[function].append(str) %}
        {% endif %}
    {% endmacro %}

    {% for setting in settings %}
        {% if setting == 'speed_factor' %}
            {% set _= add_action('M220','S%.3f' % (values[setting]|float*100)) %}
        {% elif setting == 'extrude_factor' %}
            {% set _= add_action('M221','S%.3f' % (values[setting]|float*100)) %}
        {% elif setting in ['retract_length','retract_speed','unretract_extra_length','unretract_speed','z_hop_height'] %}
            {% set _= add_action('SET_RETRACTION',"%s=%s" % (setting|upper,values[setting]), printer.firmware_retraction) %}
        {% elif setting in ['pressure_advance','pa_smooth_time'] %}
            {% set _, pa_setting = setting.split('_',1) %}
            {% set _= add_action('SET_PRESSURE_ADVANCE', "%s=%s" % (pa_setting|upper,values[setting])) %}
        {% elif setting in ['fan_speed','max_flow'] %}
            {% set _= add_action('_KBOBINE_%s' % setting|upper, "S=%s" % values[setting], fs_vars['%s_enabled' % setting]) %}
        {% elif printer.virtual_sdcard.file_position > 0 %}
            {% if setting == 'extruder_temp' and printer.extruder.target > 0 %}
                {% set _=  add_action('SET_HEATER_TEMPERATURE HEATER=extruder','TARGET=%s' % (values[setting]), fs_vars['%s_enabled' % setting]) %}
            {% elif setting == 'bed_temp' and printer.heater_bed.target > 0 %}
                {% set _=  add_action('SET_HEATER_TEMPERATURE HEATER=heater_bed','TARGET=%s' % (values[setting]), fs_vars['%s_enabled' % setting]) %}
            {% elif setting == 'chamber_temp' %}
                {% set _=  add_action('SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber','TARGET=%s' % (values[setting]), fs_vars['%s_enabled' % setting]) %}
            {% elif 'filament_sensor' in setting %}
                {% set _= add_action('SET_FILAMENT_SENSOR SENSOR=%s' % setting, 'ENABLED=%s' % (values[setting]), fs_vars['%s_enabled' % setting]) %}
            {% endif %}
        {% endif %}
    {% endfor %}
    {% for k,v in pending_actions.items() if v != [] %}
        {k} {v|join(' ')}
    {% endfor %}

[gcode_macro _APPLY_ALL_SETTINGS]
gcode:
    {% set fs_vars = printer['gcode_macro _KBOBINE'] %}
    _APPLY_SETTINGS PARAMS={fs_vars.current_settings|join(',')}

[gcode_macro _FS_VERBOSE]
gcode:
    {% if printer['gcode_macro _KBOBINE'].verbose %}
        RESPOND MSG="{params.MSG}"
    {% endif %}