### GUI functions
# Mainsail introduces a new way to interact with the user, using the RESPOND command.
# This snippet provides a set of macros to create prompts and messages boxes in the GUI.
# it also works with Fluidd and Klipperscreen.

# confirmation prompt
[gcode_macro _PROMPT_QUESTION]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin {params.TITLE|default("Kbobine")}"
    RESPOND TYPE=command MSG="action:prompt_text {params.MSG}"
    RESPOND TYPE=command MSG="action:prompt_footer_button Yes|{params.ACTION}"
    RESPOND TYPE=command MSG="action:prompt_footer_button No|_PROMPT_CLOSE|error"
    RESPOND TYPE=command MSG="action:prompt_show"

# message box prompt
[gcode_macro _PROMPT_MSGBOX]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin {params.TITLE|default("Kbobine")}"
    RESPOND TYPE=command MSG="action:prompt_text {params.MSG}"
    RESPOND TYPE=command MSG="action:prompt_footer_button OK|_PROMPT_CLOSE|error"
    RESPOND TYPE=command MSG="action:prompt_show"

# selection prompt
# Usage: _PROMPT_SELECT TITLE=<TITLE> MSG=<MSG> OPTIONS=<comma separated values> 
#           ACTION=<MACRO> KEY=<PARAM TO ADD TO ACTION MACRO WITH OPTION VALUE>
[gcode_macro _PROMPT_SELECT]
gcode:
    {% set allowed_colors=['primary', 'secondary', 'info', 'warning', 'error']%}
    {% set options = params.OPTIONS.split(",") %}
    {% set values = (params.VALUES|default(params.OPTIONS)).split(",") %}
    {% set colors = (params.COLORS|default("")).split(",") %}

    RESPOND TYPE=command MSG="action:prompt_begin {params.TITLE|default("Kbobine")}"
    RESPOND TYPE=command MSG="action:prompt_text {params.MSG}"
    {% for i in range(options|length) %}
        {% set color = "|%s" % colors[i] if colors[i] in allowed_colors else "secondary" %}
        RESPOND TYPE=command MSG="action:prompt_button {options[i]}|{params.ACTION} {params.KEY}=\"{values[i]}\"{color}"
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button ABORT|_PROMPT_CLOSE|error"
    RESPOND TYPE=command MSG="action:prompt_show"

# Close current prompt
[gcode_macro _PROMPT_CLOSE]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"


##
## Kbobine Prompt Functions
##
[gcode_macro _PROMPT_CALIBRATE]
gcode:
    {% if printer['gcode_macro CALIBRATE'] %}
    _PROMPT_QUESTION TITLE="{params.TITLE|default("Filament calibration")}" MSG="{params.REASON|default('')
            }Filament calibration required. Run it now ?" ACTION="CALIBRATE"
    {% else %}
    _PROMPT_MSGBOX TITLE="{params.TITLE|default("Filament calibration")}" MSG="{params.REASON|default('')
            }Filament calibration required."
    {% endif %}


[gcode_macro _PROMPT_SELECT_SETTINGS_SOURCE]
gcode:
## load variables
    {% set kb_vars = printer.vars.KBOBINE %}
    {% set ID = params['ID']|default(0)|int %}

## load settings db
    {% set fs_table = kb_vars.kbobine_table | default({}) %}

## variables declaration    
    {% set same_filament = {} %}

## Check for equivalent filament
    {% if ID %}
        ## Same vendor, name, material
        {% set str="vendor, name, material" %}
        {% for k, v in fs_table.items() 
            if v.vendor == kb_vars.spoolman.vendor 
                and v.name == kb_vars.spoolman.name
                and v.material == kb_vars.spoolman.material %}
            {% set _=same_filament.update({k:v}) %}
        {% endfor %}
        ## or same vendor, material    
        {% if same_filament|length == 0 %}
        {% set str="vendor, material" %}
        {% for k, v in fs_table.items() 
            if v.vendor == kb_vars.spoolman.vendor 
                and v.material == kb_vars.spoolman.material %}
            {% set _=same_filament.update({k:v}) %}
        {% endfor %}
        {% endif %}
        ## or same material only
        {% if same_filament|length == 0 %}
        {% set str="material" %}
        {% for k, v in fs_table.items() 
            if v.material == kb_vars.spoolman.material %}
            {% set _=same_filament.update({k:v}) %}
        {% endfor %}
        {% endif %}

 ## Prompt_ui
        {% set options = [] %}
        {% set values = [] %}
        {% set colors = [] %}
        {% for SOURCE, settings in same_filament.items()|sort(reverse=True) %}
                {% do options.append("%s:%s %s" % (SOURCE,settings.vendor,settings.name)) %}
                {% do values.append(SOURCE) %}
                {% do colors.append("secondary") %}
        {% endfor %}
        {% do options.append("Use default") %}
        {% do values.append(0) %}
        {% do colors.append("primary") %}
        _PROMPT_SELECT TITLE="Insert new filament" MSG="There is no settings for '{ID}:{
                    kb_vars.spoolman.vendor|upper} {
                    kb_vars.spoolman.name|upper}'.{
                    " Duplicate settings from same %s:" % str if same_filament|length > 0 else ''
                    }" ACTION="_INSERT_FILAMENT_SETTINGS" KEY="SOURCE" OPTIONS="{options|join(",")
                    }" VALUES="{values|join(",")}" COLORS="{colors|join(",")}" 
    {% endif %}
